name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pytest pytest-cov pytest-xdist
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src/text_fancipy --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        token: ${{ secrets.CODECOV_TOKEN }}

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install black flake8 isort mypy bandit
        python -m pip install -e .
    
    - name: Run Black
      run: black --check src/ tests/
    
    - name: Run isort
      run: isort --check-only src/ tests/
    
    - name: Run flake8
      run: flake8 src/ tests/
    
    - name: Run mypy
      run: mypy src/text_fancipy --ignore-missing-imports
    
    - name: Run bandit
      run: bandit -r src/

  pre-commit:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        python -m pip install pre-commit
    
    - name: Run pre-commit
      run: pre-commit run --all-files

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [test, code-quality, pre-commit]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: python -m twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package
        path: dist/

  build-executables:
    name: Build Executables (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [test, code-quality, pre-commit]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: fancipy-linux-x86_64
            binary_name: fancipy
          - os: windows-latest
            artifact_name: fancipy-windows-x86_64
            binary_name: fancipy.exe
          - os: macos-latest
            artifact_name: fancipy-macos-x86_64
            binary_name: fancipy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install -e .
        python -m pip install pyinstaller
    
    - name: Build executable
      run: |
        python -m PyInstaller --onefile --name fancipy --distpath dist --workpath build/pyinstaller --specpath build src/text_fancipy/__main__.py
    
    - name: Test executable (Unix)
      if: runner.os != 'Windows'
      run: |
        ./dist/fancipy show
        echo "Hello World" | ./dist/fancipy bold
    
    - name: Test executable (Windows)
      if: runner.os == 'Windows'
      run: |
        .\dist\fancipy.exe show
        echo "Hello World" | .\dist\fancipy.exe bold
    
    - name: Upload executable
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.binary_name }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-python, build-executables]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/
    
    - name: Organize artifacts
      run: |
        mkdir -p dist/
        cp artifacts/python-package/* dist/
        cp artifacts/fancipy-linux-x86_64/fancipy dist/fancipy-linux-x86_64
        cp artifacts/fancipy-windows-x86_64/fancipy.exe dist/fancipy-windows-x86_64.exe
        cp artifacts/fancipy-macos-x86_64/fancipy dist/fancipy-macos-x86_64
        ls -la dist/
    
    - name: Generate release notes
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Generate release notes
        cat > release_notes.md << 'EOF'
        ## Release $VERSION
        
        ### Installation
        
        **Python Package:**
        ```bash
        pip install text-fancipy==$VERSION
        ```
        
        **Standalone Executables:**
        Download the appropriate executable for your platform:
        - Linux: `fancipy-linux-x86_64`
        - Windows: `fancipy-windows-x86_64.exe`
        - macOS: `fancipy-macos-x86_64`
        
        ### Usage
        ```bash
        # Show available styles
        fancipy show
        
        # Convert text to bold style
        fancipy bold -t "Hello World"
        
        # Convert fancy text back to normal
        fancipy undo -t "𝐇𝐞𝐥𝐥𝐨 𝐖𝐨𝐫𝐥𝐝"
        ```
        
        ### Changes
        See [CHANGELOG.md](https://github.com/twardoch/text_fancipy/blob/main/CHANGELOG.md) for detailed changes.
        EOF
        
        # Replace $VERSION with actual version
        sed -i "s/\$VERSION/${VERSION}/g" release_notes.md
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
        body_path: release_notes.md
        draft: false
        prerelease: ${{ contains(github.ref, '-') }}
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        python -m pip install --upgrade twine
        python -m twine upload dist/*.whl dist/*.tar.gz

  post-release:
    name: Post-release
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update version badge
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "Released version: $VERSION"
        # Here you could update README badges, documentation, etc.
    
    - name: Notify success
      run: |
        echo "🎉 Release ${{ github.ref_name }} completed successfully!"
        echo "📦 Python package: https://pypi.org/project/text-fancipy/"
        echo "🚀 GitHub release: https://github.com/twardoch/text_fancipy/releases/tag/${{ github.ref_name }}"